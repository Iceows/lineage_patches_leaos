From ecf8272e723ebc202666865f288143feb49fb8c2 Mon Sep 17 00:00:00 2001
From: Victor Bo <bvoid@yandex.ru>
Date: Tue, 25 Jan 2022 12:18:03 +0000
Subject: [PATCH 1/2] Revert "hfp: Report SCO sample rate via g_sco_samplerate
 audio param if needed"

This reverts commit 1acc66e413f9cb901571ca26d5dfd474bde932fc.
---
 res/values/config.xml                               |  2 --
 .../android/bluetooth/btservice/AdapterService.java |  4 ----
 .../android/bluetooth/hfp/HeadsetStateMachine.java  | 13 -------------
 3 files changed, 19 deletions(-)

diff --git a/res/values/config.xml b/res/values/config.xml
index adfc73583..6ceacf759 100644
--- a/res/values/config.xml
+++ b/res/values/config.xml
@@ -117,6 +117,4 @@
     <!-- Package that is providing the exposure notification service -->
     <string name="exposure_notification_package">com.google.android.gms</string>
 
-    <!-- If true, SCO sample rate will be reported via g_sco_samplerate audio parameter -->
-    <bool name="sco_report_samplerate">false</bool>
 </resources>
diff --git a/src/com/android/bluetooth/btservice/AdapterService.java b/src/com/android/bluetooth/btservice/AdapterService.java
index 437f6b27d..d9fdf1777 100644
--- a/src/com/android/bluetooth/btservice/AdapterService.java
+++ b/src/com/android/bluetooth/btservice/AdapterService.java
@@ -3237,8 +3237,4 @@ public class AdapterService extends Service {
     public boolean isMock() {
         return false;
     }
-
-    public boolean shouldReportScoSampleRate() {
-        return getResources().getBoolean(com.android.bluetooth.R.bool.sco_report_samplerate);
-    }
 }
diff --git a/src/com/android/bluetooth/hfp/HeadsetStateMachine.java b/src/com/android/bluetooth/hfp/HeadsetStateMachine.java
index 2fdde1a9a..8a6bc5527 100644
--- a/src/com/android/bluetooth/hfp/HeadsetStateMachine.java
+++ b/src/com/android/bluetooth/hfp/HeadsetStateMachine.java
@@ -82,9 +82,6 @@ public class HeadsetStateMachine extends StateMachine {
     private static final String HEADSET_WBS = "bt_wbs";
     private static final String HEADSET_AUDIO_FEATURE_ON = "on";
     private static final String HEADSET_AUDIO_FEATURE_OFF = "off";
-    private static final String HEADSET_G_SCO_SAMPLERATE = "g_sco_samplerate";
-    private static final String HEADSET_G_WB_SAMPLERATE = "16000";
-    private static final String HEADSET_G_NB_SAMPLERATE = "8000";
 
     static final int CONNECT = 1;
     static final int DISCONNECT = 2;
@@ -1514,10 +1511,6 @@ public class HeadsetStateMachine extends StateMachine {
                 HEADSET_WBS + "=" + mAudioParams.getOrDefault(HEADSET_WBS,
                         HEADSET_AUDIO_FEATURE_OFF)
         });
-        if (mAdapterService.shouldReportScoSampleRate()) {
-            keyValuePairs += ";" + HEADSET_G_SCO_SAMPLERATE + "=" + mAudioParams.getOrDefault(
-                    HEADSET_G_SCO_SAMPLERATE, HEADSET_G_NB_SAMPLERATE);
-        }
         Log.i(TAG, "setAudioParameters for " + mDevice + ": " + keyValuePairs);
         mSystemInterface.getAudioManager().setParameters(keyValuePairs);
     }
@@ -1657,16 +1650,10 @@ public class HeadsetStateMachine extends StateMachine {
         switch (wbsConfig) {
             case HeadsetHalConstants.BTHF_WBS_YES:
                 mAudioParams.put(HEADSET_WBS, HEADSET_AUDIO_FEATURE_ON);
-                if (mAdapterService.shouldReportScoSampleRate()) {
-                    mAudioParams.put(HEADSET_G_SCO_SAMPLERATE, HEADSET_G_WB_SAMPLERATE);
-                }
                 break;
             case HeadsetHalConstants.BTHF_WBS_NO:
             case HeadsetHalConstants.BTHF_WBS_NONE:
                 mAudioParams.put(HEADSET_WBS, HEADSET_AUDIO_FEATURE_OFF);
-                if (mAdapterService.shouldReportScoSampleRate()) {
-                    mAudioParams.put(HEADSET_G_SCO_SAMPLERATE, HEADSET_G_NB_SAMPLERATE);
-                }
                 break;
             default:
                 Log.e(TAG, "processWBSEvent: unknown wbsConfig " + wbsConfig);
-- 
2.25.1

