From 2442c6d1aa0435c9c75761d0fd924a4313e09299 Mon Sep 17 00:00:00 2001
From: Danny Lin <danny@kdrag0n.dev>
Date: Wed, 7 Jul 2021 21:22:35 -0700
Subject: [PATCH 196/230] graphics: Override system fonts with user-selected
 overlays

Only using user-selected fonts for a subset of system apps leads to an
inconsistent visual experience. While we've already applied them to the
system's Material UI themes, many apps have hard-code references to
sans-serif (whether it's through XML styles or Typeface.SANS_SERIF), so
it is also necessary to override Typeface fonts at runtime.

Changing overlays causes OverlayManagerService to schedule
ApplicationInfo updates for affected apps, which forces a configuration
change by incrementing Configuration#assetsSeq.

TODO: figure out why not all apps get consistent configuration updates
until manually relaunching activities

Change-Id: I684a56315808f78f24a14cd6efeda0ea05e25abf
---
 core/java/android/app/ActivityThread.java    |  2 +
 core/res/res/values/symbols.xml              |  3 +
 graphics/java/android/graphics/Typeface.java | 61 +++++++++++++++++---
 3 files changed, 59 insertions(+), 7 deletions(-)

diff --git a/core/java/android/app/ActivityThread.java b/core/java/android/app/ActivityThread.java
index d523c550124..a22a44302e1 100644
--- a/core/java/android/app/ActivityThread.java
+++ b/core/java/android/app/ActivityThread.java
@@ -85,6 +85,7 @@ import android.graphics.Bitmap;
 import android.graphics.Canvas;
 import android.graphics.HardwareRenderer;
 import android.graphics.ImageDecoder;
+import android.graphics.Typeface;
 import android.hardware.display.DisplayManagerGlobal;
 import android.inputmethodservice.InputMethodService;
 import android.net.ConnectivityManager;
@@ -5776,6 +5777,7 @@ public final class ActivityThread extends ClientTransactionHandler {
                     + config);
 
             final Resources appResources = mInitialApplication.getResources();
+            Typeface.updateDefaultFont(appResources);
             if (appResources.hasOverrideDisplayAdjustments()) {
                 // The value of Display#getRealSize will be adjusted by FixedRotationAdjustments,
                 // but Display#getSize refers to DisplayAdjustments#mConfiguration. So the rotated
diff --git a/core/res/res/values/symbols.xml b/core/res/res/values/symbols.xml
index 8401a1bc427..91eb6723ca5 100644
--- a/core/res/res/values/symbols.xml
+++ b/core/res/res/values/symbols.xml
@@ -4058,4 +4058,7 @@
   <java-symbol type="array" name="config_notificationMsgPkgsAllowedAsConvos" />
 
   <java-symbol type="array" name="config_keep_warming_services" />
+
+  <!-- For dynamic default font styles -->
+  <java-symbol type="string" name="config_bodyFontFamily" />
 </resources>
diff --git a/graphics/java/android/graphics/Typeface.java b/graphics/java/android/graphics/Typeface.java
index 5ed5d8f9056..042cbdcac9f 100644
--- a/graphics/java/android/graphics/Typeface.java
+++ b/graphics/java/android/graphics/Typeface.java
@@ -27,6 +27,7 @@ import android.annotation.NonNull;
 import android.annotation.Nullable;
 import android.compat.annotation.UnsupportedAppUsage;
 import android.content.res.AssetManager;
+import android.content.res.Resources;
 import android.graphics.fonts.Font;
 import android.graphics.fonts.FontFamily;
 import android.graphics.fonts.FontStyle;
@@ -38,6 +39,7 @@ import android.provider.FontRequest;
 import android.provider.FontsContract;
 import android.text.FontConfig;
 import android.util.Base64;
+import android.util.Log;
 import android.util.LongSparseArray;
 import android.util.LruCache;
 import android.util.SparseArray;
@@ -56,6 +58,7 @@ import java.io.IOException;
 import java.io.InputStream;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.reflect.Field;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collections;
@@ -125,6 +128,8 @@ public class Typeface {
     private static final Object sDynamicCacheLock = new Object();
 
     static Typeface sDefaultTypeface;
+    // For dynamic default font styles
+    private static final HashMap<String, Typeface> sSystemFontOverrides = new HashMap<>();
 
     // Following two fields are not used but left for hiddenapi private list
     /**
@@ -807,7 +812,7 @@ public class Typeface {
      * @return The best matching typeface.
      */
     public static Typeface create(String familyName, @Style int style) {
-        return create(getSystemDefaultTypeface(familyName), style);
+        return create(getSystemOverrideTypeface(familyName), style);
     }
 
     /**
@@ -1098,6 +1103,11 @@ public class Typeface {
         mWeight = nativeGetWeight(ni);
     }
 
+    private static Typeface getSystemOverrideTypeface(@NonNull String familyName) {
+        Typeface tf = sSystemFontOverrides.get(familyName);
+        return tf == null ? getSystemDefaultTypeface(familyName) : tf;
+    }
+
     private static Typeface getSystemDefaultTypeface(@NonNull String familyName) {
         Typeface tf = sSystemFontMap.get(familyName);
         return tf == null ? Typeface.DEFAULT : tf;
@@ -1136,6 +1146,48 @@ public class Typeface {
         }
     }
 
+    private static void setPublicDefaults(String familyName) {
+        sDefaults = new Typeface[] {
+            DEFAULT,
+            DEFAULT_BOLD,
+            create(getSystemDefaultTypeface(familyName), Typeface.ITALIC),
+            create(getSystemDefaultTypeface(familyName), Typeface.BOLD_ITALIC),
+        };
+    }
+
+    private static void setFinalField(String fieldName, Typeface value) {
+        try {
+            Field field = Typeface.class.getDeclaredField(fieldName);
+            // isAccessible bypasses final on ART
+            field.setAccessible(true);
+            field.set(null, value);
+            field.setAccessible(false);
+        } catch (NoSuchFieldException | IllegalAccessException e) {
+            Log.e(TAG, "Failed to set Typeface." + fieldName, e);
+        }
+    }
+
+    /** @hide */
+    public static void updateDefaultFont(Resources res) {
+        String familyName = res.getString(com.android.internal.R.string.config_bodyFontFamily);
+        Typeface typeface = sSystemFontMap.get(familyName);
+        setDefault(typeface);
+
+        // Static typefaces in public API
+        setFinalField("DEFAULT", create(getSystemDefaultTypeface(familyName), 0));
+        setFinalField("DEFAULT_BOLD", create(getSystemDefaultTypeface(familyName), Typeface.BOLD));
+        setFinalField("SANS_SERIF", DEFAULT);
+
+        // For default aliases used in framework styles
+        sSystemFontOverrides.put("sans-serif", typeface);
+        sSystemFontOverrides.put("sans-serif-thin", create(typeface, 100, false));
+        sSystemFontOverrides.put("sans-serif-light", create(typeface, 300, false));
+        sSystemFontOverrides.put("sans-serif-medium", create(typeface, 500, false));
+        sSystemFontOverrides.put("sans-serif-black", create(typeface, 900, false));
+
+        setPublicDefaults(familyName);
+    }
+
     static {
         final HashMap<String, Typeface> systemFontMap = new HashMap<>();
         initSystemDefaultTypefaces(systemFontMap, SystemFonts.getRawSystemFallbackMap(),
@@ -1154,12 +1206,7 @@ public class Typeface {
         SERIF           = create("serif", 0);
         MONOSPACE       = create("monospace", 0);
 
-        sDefaults = new Typeface[] {
-            DEFAULT,
-            DEFAULT_BOLD,
-            create((String) null, Typeface.ITALIC),
-            create((String) null, Typeface.BOLD_ITALIC),
-        };
+        setPublicDefaults(null);
 
         // A list of generic families to be registered in native.
         // https://www.w3.org/TR/css-fonts-4/#generic-font-families
-- 
2.25.1

