From a0378ad235aea3bd6e4538bc52de585431e8370b Mon Sep 17 00:00:00 2001
From: Victor Bo <bvoid@yandex.ru>
Date: Tue, 17 Nov 2020 03:30:21 -0500
Subject: [PATCH 069/230] Screenrecord: add blinking stop dot and low quality
 options

  from
  https://github.com/ezio84/abc_frameworks_base/commit/1cb66254b16655126af25d5ada351921ecee66c7
---
 .../SystemUI/res/drawable/ic_sr_quality.xml   |  23 ++++
 .../SystemUI/res/drawable/ic_sr_stopdot.xml   |  23 ++++
 .../res/drawable/screenrecord_dot.xml         |  21 ++++
 .../res/layout/screen_record_dialog.xml       |  44 ++++++-
 .../SystemUI/res/layout/screenrecord_dot.xml  |  16 +++
 .../SystemUI/res/values-it/custom_strings.xml |  24 ++++
 .../SystemUI/res/values-ru/custom_strings.xml |  24 ++++
 .../SystemUI/res/values/custom_dimens.xml     |  20 +++
 .../SystemUI/res/values/custom_strings.xml    |  22 ++++
 .../screenrecord/RecordingService.java        | 117 +++++++++++++++++-
 .../screenrecord/ScreenMediaRecorder.java     |  14 ++-
 .../screenrecord/ScreenRecordDialog.java      |   8 +-
 12 files changed, 350 insertions(+), 6 deletions(-)
 create mode 100644 packages/SystemUI/res/drawable/ic_sr_quality.xml
 create mode 100644 packages/SystemUI/res/drawable/ic_sr_stopdot.xml
 create mode 100644 packages/SystemUI/res/drawable/screenrecord_dot.xml
 create mode 100644 packages/SystemUI/res/layout/screenrecord_dot.xml
 create mode 100644 packages/SystemUI/res/values-it/custom_strings.xml
 create mode 100644 packages/SystemUI/res/values-ru/custom_strings.xml
 create mode 100644 packages/SystemUI/res/values/custom_dimens.xml
 create mode 100644 packages/SystemUI/res/values/custom_strings.xml

diff --git a/packages/SystemUI/res/drawable/ic_sr_quality.xml b/packages/SystemUI/res/drawable/ic_sr_quality.xml
new file mode 100644
index 00000000000..ea13b86203b
--- /dev/null
+++ b/packages/SystemUI/res/drawable/ic_sr_quality.xml
@@ -0,0 +1,23 @@
+<!--
+Copyright (C) 2020 The Android Open Source Project
+   Licensed under the Apache License, Version 2.0 (the "License");
+    you may not use this file except in compliance with the License.
+    You may obtain a copy of the License at
+         http://www.apache.org/licenses/LICENSE-2.0
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an "AS IS" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+-->
+<!-- maybe need android:fillType="evenOdd" -->
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="24dp"
+    android:height="24dp"
+    android:viewportWidth="24.0"
+    android:viewportHeight="24.0">
+    <path
+        android:fillColor="#FF000000"
+        android:pathData="M21 3H3c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h18c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H3V5h10v4h8v10z"
+    />
+</vector>
diff --git a/packages/SystemUI/res/drawable/ic_sr_stopdot.xml b/packages/SystemUI/res/drawable/ic_sr_stopdot.xml
new file mode 100644
index 00000000000..b34d7a4260a
--- /dev/null
+++ b/packages/SystemUI/res/drawable/ic_sr_stopdot.xml
@@ -0,0 +1,23 @@
+<!--
+Copyright (C) 2020 The Android Open Source Project
+   Licensed under the Apache License, Version 2.0 (the "License");
+    you may not use this file except in compliance with the License.
+    You may obtain a copy of the License at
+         http://www.apache.org/licenses/LICENSE-2.0
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an "AS IS" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+-->
+<!-- maybe need android:fillType="evenOdd" -->
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="24dp"
+    android:height="24dp"
+    android:viewportWidth="24.0"
+    android:viewportHeight="24.0">
+    <path
+        android:fillColor="#FF000000"
+        android:pathData="m 8,16 h 8 V 8 H 8 Z M 12,2 C 6.48,2 2,6.48 2,12 2,17.52 6.48,22 12,22 17.52,22 22,17.52 22,12 22,6.48 17.52,2 12,2 Z"
+    />
+</vector>
diff --git a/packages/SystemUI/res/drawable/screenrecord_dot.xml b/packages/SystemUI/res/drawable/screenrecord_dot.xml
new file mode 100644
index 00000000000..5309ccffb7b
--- /dev/null
+++ b/packages/SystemUI/res/drawable/screenrecord_dot.xml
@@ -0,0 +1,21 @@
+<!--
+Copyright (C) 2017 ABC rom
+   Licensed under the Apache License, Version 2.0 (the "License");
+    you may not use this file except in compliance with the License.
+    You may obtain a copy of the License at
+         http://www.apache.org/licenses/LICENSE-2.0
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an "AS IS" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+-->
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+        android:width="48dp"
+        android:height="48dp"
+        android:viewportWidth="48.0"
+        android:viewportHeight="48.0">
+      <path
+          android:fillColor="#ffbf1818"
+          android:pathData="M 24 4.3476562 A 19.652719 19.652719 0 0 0 4.3476562 24 A 19.652719 19.652719 0 0 0 24 43.652344 A 19.652719 19.652719 0 0 0 43.652344 24 A 19.652719 19.652719 0 0 0 24 4.3476562 z "/>
+</vector>
diff --git a/packages/SystemUI/res/layout/screen_record_dialog.xml b/packages/SystemUI/res/layout/screen_record_dialog.xml
index acef94315e9..6ca03b2a0d2 100644
--- a/packages/SystemUI/res/layout/screen_record_dialog.xml
+++ b/packages/SystemUI/res/layout/screen_record_dialog.xml
@@ -105,6 +105,48 @@
                         android:textAppearance="?android:attr/textAppearanceSmall"/>
 
                 </LinearLayout>
+
+                <LinearLayout
+                    android:layout_width="match_parent"
+                    android:layout_height="wrap_content"
+                    android:orientation="horizontal">
+                    <ImageView
+                        android:layout_width="@dimen/screenrecord_logo_size"
+                        android:layout_height="@dimen/screenrecord_logo_size"
+                        android:src="@drawable/ic_sr_stopdot"
+                        android:tint="@color/GM2_grey_700"
+                        android:layout_gravity="center"
+                        android:layout_marginRight="@dimen/screenrecord_dialog_padding"/>
+                    <Switch
+                        android:layout_width="match_parent"
+                        android:layout_height="48dp"
+                        android:id="@+id/screenrecord_stopdot_switch"
+                        android:text="@string/screenrecord_stopdot_label"
+                        android:textColor="?android:attr/textColorPrimary"
+                        android:textAppearance="?android:attr/textAppearanceSmall"/>
+
+                </LinearLayout>
+
+                <LinearLayout
+                    android:layout_width="match_parent"
+                    android:layout_height="wrap_content"
+                    android:orientation="horizontal">
+                    <ImageView
+                        android:layout_width="@dimen/screenrecord_logo_size"
+                        android:layout_height="@dimen/screenrecord_logo_size"
+                        android:src="@drawable/ic_sr_quality"
+                        android:tint="@color/GM2_grey_700"
+                        android:layout_gravity="center"
+                        android:layout_marginRight="@dimen/screenrecord_dialog_padding"/>
+                    <Switch
+                        android:layout_width="match_parent"
+                        android:layout_height="48dp"
+                        android:id="@+id/screenrecord_lowquality_switch"
+                        android:text="@string/screenrecord_lowquality_label"
+                        android:textColor="?android:attr/textColorPrimary"
+                        android:textAppearance="?android:attr/textAppearanceSmall"/>
+
+                </LinearLayout>
             </LinearLayout>
 
             <!-- hr -->
@@ -142,4 +184,4 @@
             </LinearLayout>
         </LinearLayout>
     </ScrollView>
-</LinearLayout>
\ No newline at end of file
+</LinearLayout>
diff --git a/packages/SystemUI/res/layout/screenrecord_dot.xml b/packages/SystemUI/res/layout/screenrecord_dot.xml
new file mode 100644
index 00000000000..1e6babb00c0
--- /dev/null
+++ b/packages/SystemUI/res/layout/screenrecord_dot.xml
@@ -0,0 +1,16 @@
+<?xml version="1.0" encoding="utf-8"?>
+<RelativeLayout
+        xmlns:android="http://schemas.android.com/apk/res/android"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent" >
+
+    <ImageView
+        android:id="@+id/dot"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_alignParentTop="true"
+        android:layout_alignParentEnd="true"
+        android:padding="5dp"
+        android:src="@drawable/screenrecord_dot" />
+
+</RelativeLayout>
diff --git a/packages/SystemUI/res/values-it/custom_strings.xml b/packages/SystemUI/res/values-it/custom_strings.xml
new file mode 100644
index 00000000000..0f6177c9d42
--- /dev/null
+++ b/packages/SystemUI/res/values-it/custom_strings.xml
@@ -0,0 +1,24 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!-- 
+/**
+ * Copyright (c) 2009, The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+ -->
+
+<resources xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <string name="screenrecord_stopdot_label">Mostra stop intermittente.\nPremi a lungo per spostarlo</string>
+    <string name="screenrecord_lowquality_label">Bassa qualità e file più piccolo</string>
+</resources>
diff --git a/packages/SystemUI/res/values-ru/custom_strings.xml b/packages/SystemUI/res/values-ru/custom_strings.xml
new file mode 100644
index 00000000000..b1289629084
--- /dev/null
+++ b/packages/SystemUI/res/values-ru/custom_strings.xml
@@ -0,0 +1,24 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!-- 
+/**
+ * Copyright (c) 2009, The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+ -->
+
+<resources xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <string name="screenrecord_stopdot_label">Показывать стоп-точку\nЗажмите её для перемещения</string>
+    <string name="screenrecord_lowquality_label">Низкое качество видео</string>
+</resources>
diff --git a/packages/SystemUI/res/values/custom_dimens.xml b/packages/SystemUI/res/values/custom_dimens.xml
new file mode 100644
index 00000000000..ad24ef26d42
--- /dev/null
+++ b/packages/SystemUI/res/values/custom_dimens.xml
@@ -0,0 +1,20 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+ * Copyright (c) 2006, The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+*/
+-->
+<resources>
+    <dimen name="screenrecord_dot_size">48dp</dimen>
+</resources>
diff --git a/packages/SystemUI/res/values/custom_strings.xml b/packages/SystemUI/res/values/custom_strings.xml
new file mode 100644
index 00000000000..32425179b8b
--- /dev/null
+++ b/packages/SystemUI/res/values/custom_strings.xml
@@ -0,0 +1,22 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+/**
+ * Copyright (c) 2009, The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+-->
+<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <string name="screenrecord_stopdot_label">Show stop dot\nLongpress to move it</string>
+    <string name="screenrecord_lowquality_label">Lower quality for smaller file size</string>
+</resources>
diff --git a/packages/SystemUI/src/com/android/systemui/screenrecord/RecordingService.java b/packages/SystemUI/src/com/android/systemui/screenrecord/RecordingService.java
index 8ec3db59117..a30342b382d 100644
--- a/packages/SystemUI/src/com/android/systemui/screenrecord/RecordingService.java
+++ b/packages/SystemUI/src/com/android/systemui/screenrecord/RecordingService.java
@@ -25,6 +25,7 @@ import android.content.Context;
 import android.content.Intent;
 import android.content.res.Resources;
 import android.graphics.Bitmap;
+import android.graphics.PixelFormat;
 import android.graphics.drawable.Icon;
 import android.media.MediaRecorder;
 import android.net.Uri;
@@ -34,6 +35,14 @@ import android.os.RemoteException;
 import android.os.UserHandle;
 import android.provider.Settings;
 import android.util.Log;
+import android.view.animation.AlphaAnimation;
+import android.view.animation.Animation;
+import android.view.Gravity;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.WindowManager;
+import android.widget.FrameLayout;
+import android.widget.ImageView;
 import android.widget.Toast;
 
 import com.android.internal.annotations.VisibleForTesting;
@@ -63,6 +72,8 @@ public class RecordingService extends Service implements MediaRecorder.OnInfoLis
     private static final String EXTRA_PATH = "extra_path";
     private static final String EXTRA_AUDIO_SOURCE = "extra_useAudio";
     private static final String EXTRA_SHOW_TAPS = "extra_showTaps";
+    private static final String EXTRA_SHOW_STOP_DOT = "extra_showStopDot";
+    private static final String EXTRA_LOW_QUALITY = "extra_lowQuality";
 
     private static final String ACTION_START = "com.android.systemui.screenrecord.START";
     private static final String ACTION_STOP = "com.android.systemui.screenrecord.STOP";
@@ -81,6 +92,13 @@ public class RecordingService extends Service implements MediaRecorder.OnInfoLis
     private final NotificationManager mNotificationManager;
     private final CurrentUserContextTracker mUserContextTracker;
 
+    private boolean mLowQuality;
+    private boolean mShowStopDot;
+    private boolean mIsDotAtRight;
+    private boolean mDotShowing;
+    private FrameLayout mFrameLayout;
+    private WindowManager mWindowManager;
+
     @Inject
     public RecordingService(RecordingController controller, @LongRunning Executor executor,
             UiEventLogger uiEventLogger, NotificationManager notificationManager,
@@ -91,6 +109,8 @@ public class RecordingService extends Service implements MediaRecorder.OnInfoLis
         mNotificationManager = notificationManager;
         mUserContextTracker = userContextTracker;
         mKeyguardDismissUtil = keyguardDismissUtil;
+        mWindowManager = (WindowManager) userContextTracker.getCurrentUserContext()
+                .getSystemService(Context.WINDOW_SERVICE);
     }
 
     /**
@@ -104,12 +124,14 @@ public class RecordingService extends Service implements MediaRecorder.OnInfoLis
      * @param showTaps   True to make touches visible while recording
      */
     public static Intent getStartIntent(Context context, int resultCode,
-            int audioSource, boolean showTaps) {
+            int audioSource, boolean showTaps, boolean showStopDot, boolean lowQuality) {
         return new Intent(context, RecordingService.class)
                 .setAction(ACTION_START)
                 .putExtra(EXTRA_RESULT_CODE, resultCode)
                 .putExtra(EXTRA_AUDIO_SOURCE, audioSource)
-                .putExtra(EXTRA_SHOW_TAPS, showTaps);
+                .putExtra(EXTRA_SHOW_TAPS, showTaps)
+                .putExtra(EXTRA_SHOW_STOP_DOT, showStopDot)
+                .putExtra(EXTRA_LOW_QUALITY, lowQuality);
     }
 
     @Override
@@ -128,12 +150,15 @@ public class RecordingService extends Service implements MediaRecorder.OnInfoLis
                         .values()[intent.getIntExtra(EXTRA_AUDIO_SOURCE, 0)];
                 Log.d(TAG, "recording with audio source" + mAudioSource);
                 mShowTaps = intent.getBooleanExtra(EXTRA_SHOW_TAPS, false);
+                mShowStopDot = intent.getBooleanExtra(EXTRA_SHOW_STOP_DOT, false);
+                mLowQuality = intent.getBooleanExtra(EXTRA_LOW_QUALITY, false);
 
                 mOriginalShowTaps = Settings.System.getInt(
                         getApplicationContext().getContentResolver(),
                         Settings.System.SHOW_TOUCHES, 0) != 0;
 
                 setTapsVisible(mShowTaps);
+                setStopDotVisible(mShowStopDot);
 
                 mRecorder = new ScreenMediaRecorder(
                         mUserContextTracker.getCurrentUserContext(),
@@ -141,6 +166,7 @@ public class RecordingService extends Service implements MediaRecorder.OnInfoLis
                         mAudioSource,
                         this
                 );
+                setLowQuality(mLowQuality);
                 startRecording();
                 break;
 
@@ -320,6 +346,7 @@ public class RecordingService extends Service implements MediaRecorder.OnInfoLis
 
     private void stopRecording(int userId) {
         setTapsVisible(mOriginalShowTaps);
+        setStopDotVisible(false);
         if (getRecorder() != null) {
             getRecorder().end();
             saveRecording(userId);
@@ -352,11 +379,97 @@ public class RecordingService extends Service implements MediaRecorder.OnInfoLis
         });
     }
 
+    private void setLowQuality(boolean turnOn) {
+        if (getRecorder() != null) {
+            getRecorder().setLowQuality(turnOn);
+        }
+    }
+
     private void setTapsVisible(boolean turnOn) {
         int value = turnOn ? 1 : 0;
         Settings.System.putInt(getContentResolver(), Settings.System.SHOW_TOUCHES, value);
     }
 
+    private void setStopDotVisible(boolean turnOn) {
+        if (turnOn) {
+            showDot();
+        } else if (mDotShowing) {
+            stopDot();
+        }
+    }
+
+    private void showDot() {
+        mDotShowing = true;
+        mIsDotAtRight = true;
+        final int size = (int) (this.getResources()
+                .getDimensionPixelSize(R.dimen.screenrecord_dot_size));
+        WindowManager.LayoutParams params = new WindowManager.LayoutParams(
+                WindowManager.LayoutParams.WRAP_CONTENT,
+                WindowManager.LayoutParams.WRAP_CONTENT,
+                WindowManager.LayoutParams.TYPE_PHONE,
+                WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE // don't get softkey inputs
+                | WindowManager.LayoutParams.FLAG_NOT_TOUCH_MODAL, // allow outside inputs
+                PixelFormat.TRANSLUCENT);
+        params.gravity = Gravity.TOP | Gravity.RIGHT;
+        params.width = size;
+        params.height = size;
+
+        mFrameLayout = new FrameLayout(this);
+
+        mWindowManager.addView(mFrameLayout, params);
+        final LayoutInflater inflater =
+                (LayoutInflater) mUserContextTracker.getCurrentUserContext()
+                .getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+        inflater.inflate(R.layout.screenrecord_dot, mFrameLayout);
+
+        final ImageView dot = (ImageView) mFrameLayout.findViewById(R.id.dot);
+        dot.setOnClickListener(new View.OnClickListener() {
+            public void onClick(View v) {
+                try {
+                    getStopPendingIntent().send();
+                } catch (PendingIntent.CanceledException e) {}
+            }
+        });
+
+        dot.setOnLongClickListener(new View.OnLongClickListener() {
+            public boolean onLongClick(View v) {
+                dot.setAnimation(null);
+                WindowManager.LayoutParams params =
+                        (WindowManager.LayoutParams) mFrameLayout.getLayoutParams();
+                params.gravity = Gravity.TOP | (mIsDotAtRight? Gravity.LEFT : Gravity.RIGHT);
+                mIsDotAtRight = !mIsDotAtRight;
+                mWindowManager.updateViewLayout(mFrameLayout, params);
+                dot.startAnimation(getDotAnimation());
+                return true;
+            }
+        });
+
+        dot.startAnimation(getDotAnimation());
+    }
+
+    private PendingIntent getStopPendingIntent() {
+        return PendingIntent.getService(this, REQUEST_CODE, getStopIntent(this),
+                                PendingIntent.FLAG_UPDATE_CURRENT | PendingIntent.FLAG_IMMUTABLE);
+    }
+
+    private void stopDot() {
+        mDotShowing = false;
+        final ImageView dot = (ImageView) mFrameLayout.findViewById(R.id.dot);
+        if (dot != null) {
+            dot.setAnimation(null);
+            mWindowManager.removeView(mFrameLayout);
+        }
+    }
+
+    private Animation getDotAnimation() {
+        Animation anim = new AlphaAnimation(0.0f, 1.0f);
+        anim.setDuration(500);
+        anim.setStartOffset(100);
+        anim.setRepeatMode(Animation.REVERSE);
+        anim.setRepeatCount(Animation.INFINITE);
+        return anim;
+    }
+
     /**
      * Get an intent to stop the recording service.
      * @param context Context from the requesting activity
diff --git a/packages/SystemUI/src/com/android/systemui/screenrecord/ScreenMediaRecorder.java b/packages/SystemUI/src/com/android/systemui/screenrecord/ScreenMediaRecorder.java
index 5f2d84242d3..eb156643819 100644
--- a/packages/SystemUI/src/com/android/systemui/screenrecord/ScreenMediaRecorder.java
+++ b/packages/SystemUI/src/com/android/systemui/screenrecord/ScreenMediaRecorder.java
@@ -62,6 +62,8 @@ public class ScreenMediaRecorder {
     private static final int TOTAL_NUM_TRACKS = 1;
     private static final int VIDEO_FRAME_RATE = 30;
     private static final int VIDEO_FRAME_RATE_TO_RESOLUTION_RATIO = 6;
+    private static final int LOW_VIDEO_FRAME_RATE = 25;
+    private static final int LOW_VIDEO_BIT_RATE = 2000000;
     private static final int AUDIO_BIT_RATE = 196000;
     private static final int AUDIO_SAMPLE_RATE = 44100;
     private static final int MAX_DURATION_MS = 60 * 60 * 1000;
@@ -80,6 +82,8 @@ public class ScreenMediaRecorder {
     private ScreenInternalAudioRecorder mAudio;
     private ScreenRecordingAudioSource mAudioSource;
 
+    private boolean mLowQuality;
+
     private Context mContext;
     MediaRecorder.OnInfoListener mListener;
 
@@ -92,6 +96,10 @@ public class ScreenMediaRecorder {
         mAudioSource = audioSource;
     }
 
+    public void setLowQuality(boolean low) {
+        mLowQuality = low;
+    }
+
     private void prepare() throws IOException, RemoteException {
         //Setup media projection
         IBinder b = ServiceManager.getService(MEDIA_PROJECTION_SERVICE);
@@ -126,8 +134,10 @@ public class ScreenMediaRecorder {
         wm.getDefaultDisplay().getRealMetrics(metrics);
         int screenWidth = metrics.widthPixels;
         int screenHeight = metrics.heightPixels;
-        int refereshRate = (int) wm.getDefaultDisplay().getRefreshRate();
-        int vidBitRate = screenHeight * screenWidth * refereshRate / VIDEO_FRAME_RATE
+        int refereshRate = mLowQuality? LOW_VIDEO_FRAME_RATE : (int) wm.getDefaultDisplay().getRefreshRate();
+        // TODO: make low quality bitrate scalable per device, like the default one
+        int vidBitRate = mLowQuality ? LOW_VIDEO_BIT_RATE :
+                screenHeight * screenWidth * refereshRate / VIDEO_FRAME_RATE
                 * VIDEO_FRAME_RATE_TO_RESOLUTION_RATIO;
         mMediaRecorder.setVideoEncoder(MediaRecorder.VideoEncoder.H264);
         mMediaRecorder.setVideoEncodingProfileLevel(
diff --git a/packages/SystemUI/src/com/android/systemui/screenrecord/ScreenRecordDialog.java b/packages/SystemUI/src/com/android/systemui/screenrecord/ScreenRecordDialog.java
index dc47ab4dff6..4589bdae2bd 100644
--- a/packages/SystemUI/src/com/android/systemui/screenrecord/ScreenRecordDialog.java
+++ b/packages/SystemUI/src/com/android/systemui/screenrecord/ScreenRecordDialog.java
@@ -53,6 +53,8 @@ public class ScreenRecordDialog extends Activity {
     private final RecordingController mController;
     private final CurrentUserContextTracker mCurrentUserContextTracker;
     private Switch mTapsSwitch;
+    private Switch mStopDotSwitch;
+    private Switch mLowQualitySwitch;
     private Switch mAudioSwitch;
     private Spinner mOptions;
     private List<ScreenRecordingAudioSource> mModes;
@@ -96,6 +98,8 @@ public class ScreenRecordDialog extends Activity {
 
         mAudioSwitch = findViewById(R.id.screenrecord_audio_switch);
         mTapsSwitch = findViewById(R.id.screenrecord_taps_switch);
+        mStopDotSwitch = findViewById(R.id.screenrecord_stopdot_switch);
+        mLowQualitySwitch = findViewById(R.id.screenrecord_lowquality_switch);
         mOptions = findViewById(R.id.screen_recording_options);
         ArrayAdapter a = new ScreenRecordingAdapter(getApplicationContext(),
                 android.R.layout.simple_spinner_dropdown_item,
@@ -110,6 +114,8 @@ public class ScreenRecordDialog extends Activity {
     private void requestScreenCapture() {
         Context userContext = mCurrentUserContextTracker.getCurrentUserContext();
         boolean showTaps = mTapsSwitch.isChecked();
+        boolean showStopDot = mStopDotSwitch.isChecked();
+        boolean lowQuality = mLowQualitySwitch.isChecked();
         ScreenRecordingAudioSource audioMode = mAudioSwitch.isChecked()
                 ? (ScreenRecordingAudioSource) mOptions.getSelectedItem()
                 : NONE;
@@ -117,7 +123,7 @@ public class ScreenRecordDialog extends Activity {
                 RecordingService.REQUEST_CODE,
                 RecordingService.getStartIntent(
                         userContext, RESULT_OK,
-                        audioMode.ordinal(), showTaps),
+                        audioMode.ordinal(), showTaps, showStopDot, lowQuality),
                 PendingIntent.FLAG_UPDATE_CURRENT | PendingIntent.FLAG_IMMUTABLE);
         PendingIntent stopIntent = PendingIntent.getService(userContext,
                 RecordingService.REQUEST_CODE,
-- 
2.25.1

