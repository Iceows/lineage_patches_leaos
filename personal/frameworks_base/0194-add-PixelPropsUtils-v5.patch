From 68d1cc37af947c2c80b1ad3543bdcaee5b9c6e58 Mon Sep 17 00:00:00 2001
From: Victor Bo <bvoid@yandex.ru>
Date: Wed, 22 Dec 2021 17:34:55 +0000
Subject: [PATCH 194/230] add PixelPropsUtils v5

  based on
  https://github.com/PixelExperience/frameworks_base/blob/eleven/core/java/com/android/internal/util/custom/PixelPropsUtils.java
  https://github.com/ProtonAOSP/android_frameworks_base/commit/c5a66dbeefe7c4f212d88768a72f897e69040d31

Change-Id: I2772e497eaa1406aeefc46e510cc4d25f213de30
---
 core/java/android/app/Instrumentation.java    |   6 +
 .../internal/util/custom/PixelPropsUtils.java | 156 ++++++++++++++++++
 2 files changed, 162 insertions(+)
 create mode 100644 core/java/com/android/internal/util/custom/PixelPropsUtils.java

diff --git a/core/java/android/app/Instrumentation.java b/core/java/android/app/Instrumentation.java
index 721525d9af9..bb0da685f2d 100644
--- a/core/java/android/app/Instrumentation.java
+++ b/core/java/android/app/Instrumentation.java
@@ -63,6 +63,8 @@ import java.lang.annotation.RetentionPolicy;
 import java.util.ArrayList;
 import java.util.List;
 
+import com.android.internal.util.custom.PixelPropsUtils;
+
 /**
  * Base class for implementing application instrumentation code.  When running
  * with instrumentation turned on, this class will be instantiated for you
@@ -1157,6 +1159,8 @@ public class Instrumentation {
         Application app = getFactory(context.getPackageName())
                 .instantiateApplication(cl, className);
         app.attach(context);
+        String packageName = app.getPackageName();
+        PixelPropsUtils.setProps(packageName);
         return app;
     }
     
@@ -1174,6 +1178,8 @@ public class Instrumentation {
             ClassNotFoundException {
         Application app = (Application)clazz.newInstance();
         app.attach(context);
+        String packageName = app.getPackageName();
+        PixelPropsUtils.setProps(packageName);
         return app;
     }
 
diff --git a/core/java/com/android/internal/util/custom/PixelPropsUtils.java b/core/java/com/android/internal/util/custom/PixelPropsUtils.java
new file mode 100644
index 00000000000..f02a16bf778
--- /dev/null
+++ b/core/java/com/android/internal/util/custom/PixelPropsUtils.java
@@ -0,0 +1,156 @@
+/*
+ * Copyright (C) 2020 The Pixel Experience Project
+ *               2021 CAOS/LiR Treble Projects
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.internal.util.custom;
+
+import android.os.Build;
+import android.util.Log;
+
+import java.util.Arrays;
+import java.lang.reflect.Field;
+import java.util.HashMap;
+import java.util.Map;
+
+public class PixelPropsUtils {
+
+    private static final boolean PRODUCT_NEEDS_MODEL_EDIT =
+            android.os.SystemProperties.getBoolean("persist.sys.phh.pixelprops", false);
+
+    private static final String TAG = PixelPropsUtils.class.getSimpleName();
+    private static final boolean DEBUG = false;
+
+    private static final Map<String, Object> propsToChange;
+    private static final Map<String, Object> propsToChangePixelXL;
+    private static final Map<String, Object> propsToChangePixel3XL;
+
+    private static final String[] packagesToChange = {
+            "com.android.vending",
+            "com.breel.wallpapers20",
+            "com.google.android.apps.customization.pixel",
+            "com.google.android.apps.fitness",
+            "com.google.android.apps.recorder",
+            "com.google.android.apps.subscriptions.red",
+            "com.google.android.apps.tachyon",
+            "com.google.android.apps.turboadapter",
+            "com.google.android.apps.wallpaper.pixel",
+            "com.google.android.as",
+            "com.google.android.dialer",
+            "com.google.android.gms.location.history",
+            "com.google.android.inputmethod.latin",
+            "com.google.android.soundpicker",
+            "com.google.pixel.dynamicwallpapers",
+            "com.google.pixel.livewallpaper",
+            "com.google.android.apps.safetyhub",
+            "com.google.android.apps.turbo",
+            "com.google.android.apps.wallpaper",
+            "com.google.android.apps.maps",
+            "com.google.android.gms",
+            "com.google.android.apps.nexuslauncher"
+    };
+
+    private static final String[] packagesToChangePixelXL = {
+            "com.google.android.apps.photos"
+    };
+
+    private static final String[] packagesToChangePixel3XL = {
+            "com.google.android.googlequicksearchbox"
+    };
+
+    static {
+        propsToChange = new HashMap<>();
+        propsToChange.put("BRAND", "google");
+        propsToChange.put("MANUFACTURER", "Google");
+        propsToChange.put("DEVICE", "redfin");
+        propsToChange.put("PRODUCT", "redfin");
+        propsToChange.put("MODEL", "Pixel 5");
+        propsToChange.put("FINGERPRINT", "google/redfin/redfin:12/SQ1A.211205.008/7888514:user/release-keys");
+        propsToChangePixelXL = new HashMap<>();
+        propsToChangePixelXL.put("BRAND", "google");
+        propsToChangePixelXL.put("MANUFACTURER", "Google");
+        propsToChangePixelXL.put("DEVICE", "marlin");
+        propsToChangePixelXL.put("PRODUCT", "marlin");
+        propsToChangePixelXL.put("MODEL", "Pixel XL");
+        propsToChangePixelXL.put("FINGERPRINT", "google/marlin/marlin:10/QP1A.191005.007.A3/5972272:user/release-keys");
+        propsToChangePixel3XL = new HashMap<>();
+        propsToChangePixel3XL.put("BRAND", "google");
+        propsToChangePixel3XL.put("MANUFACTURER", "Google");
+        propsToChangePixel3XL.put("DEVICE", "crosshatch");
+        propsToChangePixel3XL.put("PRODUCT", "crosshatch");
+        propsToChangePixel3XL.put("MODEL", "Pixel 3 XL");
+        propsToChangePixel3XL.put("FINGERPRINT", "google/crosshatch/crosshatch:12/SP1A.210812.015/7679548:user/release-keys");
+    }
+
+    public static void setProps(String packageName) {
+        if (packageName == null) {
+            return;
+        }
+        if (PRODUCT_NEEDS_MODEL_EDIT && packageName != null) {
+            if (Arrays.asList(packagesToChange).contains(packageName)) {
+                if (DEBUG) {
+                    Log.d(TAG, "Defining props for: " + packageName);
+                }
+                for (Map.Entry<String, Object> prop : propsToChange.entrySet()) {
+                    String key = prop.getKey();
+                    Object value = prop.getValue();
+                    // Don't set model if gms
+                    if (packageName.equals("com.google.android.gms") && key.equals("MODEL")) {
+                        continue;
+                    }
+                    setPropValue(key, value);
+                }
+            }
+            if (Arrays.asList(packagesToChangePixelXL).contains(packageName)) {
+                if (DEBUG) {
+                    Log.d(TAG, "Defining props for: " + packageName);
+                }
+                for (Map.Entry<String, Object> prop : propsToChangePixelXL.entrySet()) {
+                    String key = prop.getKey();
+                    Object value = prop.getValue();
+                    setPropValue(key, value);
+                }
+            }
+            if (Arrays.asList(packagesToChangePixel3XL).contains(packageName)) {
+                if (DEBUG) {
+                    Log.d(TAG, "Defining props for: " + packageName);
+                }
+                for (Map.Entry<String, Object> prop : propsToChangePixel3XL.entrySet()) {
+                    String key = prop.getKey();
+                    Object value = prop.getValue();
+                    setPropValue(key, value);
+                }
+            }
+            // Set proper indexing fingerprint
+            if (packageName.equals("com.google.android.settings.intelligence")) {
+                setPropValue("FINGERPRINT", Build.DATE);
+            }
+        }
+    }
+
+    private static void setPropValue(String key, Object value) {
+        try {
+            if (DEBUG) {
+                Log.d(TAG, "Defining prop " + key + " to " + value.toString());
+            }
+            Field field = Build.class.getDeclaredField(key);
+            field.setAccessible(true);
+            field.set(null, value);
+            field.setAccessible(false);
+        } catch (NoSuchFieldException | IllegalAccessException e) {
+            Log.e(TAG, "Failed to set prop " + key, e);
+        }
+    }
+}
-- 
2.25.1

