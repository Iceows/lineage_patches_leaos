From 4c801c757acd9837e6fe37f8d55903f47eb04e88 Mon Sep 17 00:00:00 2001
From: Weijie Wang <weijiew@codeaurora.org>
Date: Thu, 25 Apr 2019 14:09:40 +0800
Subject: [PATCH 180/230] SystemUI: Enhancement for volte icon

SystemUI uses callback to get ims capabilities and then check whether
ims is registered. If low layer updates ims registered later than
capabilities, SystemUI wil miss the ims registered value.

In this case, SystemUI monitors both ims capabilities and registered.

Change-Id: I87400dd4a726e17d31b2b4627e45456e1a44d289
CRs-Fixed: 2436991
---
 .../policy/MobileSignalController.java        | 92 ++++++++++++++-----
 1 file changed, 70 insertions(+), 22 deletions(-)

diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/policy/MobileSignalController.java b/packages/SystemUI/src/com/android/systemui/statusbar/policy/MobileSignalController.java
index de459fbf8eb..907b3be8a11 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/policy/MobileSignalController.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/policy/MobileSignalController.java
@@ -31,6 +31,7 @@ import android.telephony.CellSignalStrength;
 import android.telephony.CellSignalStrengthCdma;
 import android.telephony.NetworkRegistrationInfo;
 import android.telephony.ims.ImsMmTelManager;
+import android.telephony.ims.ImsReasonInfo;
 import android.telephony.ims.feature.MmTelFeature;
 import android.telephony.PhoneStateListener;
 import android.telephony.ServiceState;
@@ -129,12 +130,12 @@ public class MobileSignalController extends SignalController<
         updateDataSim();
 
         int phoneId = mSubscriptionInfo.getSimSlotIndex();
-        mImsManager = ImsManager.getInstance(mContext, phoneId);
         mImsManagerConnector = new ImsManager.Connector(mContext, phoneId,
                 new ImsManager.Connector.Listener() {
                     @Override
                     public void connectionReady(ImsManager manager) throws ImsException {
                         Log.d(mTag, "ImsManager: connection ready.");
+                        mImsManager = manager;
                         setListeners();
                     }
 
@@ -394,22 +395,30 @@ public class MobileSignalController extends SignalController<
     }
 
     private boolean isVolteSwitchOn() {
-        return mImsManager.isEnhanced4gLteModeSettingEnabledByUser();
+        return mImsManager != null && mImsManager.isEnhanced4gLteModeSettingEnabledByUser();
     }
 
     private int getVolteResId() {
         int resId = 0;
-
-        if ( mCurrentState.isVolteRegistered ) {
+        if ( (mCurrentState.voiceCapable || mCurrentState.videoCapable)
+                &&  mCurrentState.imsRegistered ) {
             resId = R.drawable.ic_volte;
         }
         return resId;
     }
 
     private void setListeners() {
+        if (mImsManager == null) {
+            Log.e(mTag, "setListeners mImsManager is null");
+            return;
+        }
+
         try {
             mImsManager.addCapabilitiesCallback(mCapabilityCallback);
+            mImsManager.addRegistrationCallback(mImsRegistrationCallback);
             Log.d(mTag, "addCapabilitiesCallback " + mCapabilityCallback + " into " + mImsManager);
+            Log.d(mTag, "addRegistrationCallback " + mImsRegistrationCallback
+                    + " into " + mImsManager);
         } catch (ImsException e) {
             Log.d(mTag, "unable to addCapabilitiesCallback callback.");
         }
@@ -418,21 +427,31 @@ public class MobileSignalController extends SignalController<
 
     private void queryImsState() {
         TelephonyManager tm = mPhone.createForSubscriptionId(mSubscriptionInfo.getSubscriptionId());
-        boolean isVoiceCapable = tm.isVolteAvailable();
-        boolean isVideoCapable = tm.isVideoTelephonyAvailable();
-        Log.d(mTag, "tm=" + tm +" phone=" + mPhone
-                + " isVoiceCapable=" + isVoiceCapable
-                + " isVideoCapable=" +isVideoCapable);
-        if ( isVoiceCapable || isVideoCapable ) {
-            mCurrentState.isVolteRegistered = true;
+        mCurrentState.voiceCapable = tm.isVolteAvailable();
+        mCurrentState.videoCapable = tm.isVideoTelephonyAvailable();
+        mCurrentState.imsRegistered = mPhone.isImsRegistered(mSubscriptionInfo.getSubscriptionId());
+        if (DEBUG) {
+            Log.d(mTag, "queryImsState tm=" + tm + " phone=" + mPhone
+                    + " voiceCapable=" + mCurrentState.voiceCapable
+                    + " videoCapable=" + mCurrentState.videoCapable
+                    + " imsResitered=" + mCurrentState.imsRegistered);
         }
+        notifyListenersIfNecessary();
     }
 
     private void removeListeners() {
+        if (mImsManager == null) {
+            Log.e(mTag, "removeListeners mImsManager is null");
+            return;
+        }
+
         try {
             mImsManager.removeCapabilitiesCallback(mCapabilityCallback);
+            mImsManager.removeRegistrationListener(mImsRegistrationCallback);
             Log.d(mTag, "removeCapabilitiesCallback " + mCapabilityCallback
                     + " from " + mImsManager);
+            Log.d(mTag, "removeRegistrationCallback " + mImsRegistrationCallback
+                    + " from " + mImsManager);
         } catch (ImsException e) {
             Log.d(mTag, "unable to remove callback.");
         }
@@ -788,19 +807,40 @@ public class MobileSignalController extends SignalController<
     private ImsMmTelManager.CapabilityCallback mCapabilityCallback = new ImsMmTelManager.CapabilityCallback() {
         @Override
         public void onCapabilitiesStatusChanged(MmTelFeature.MmTelCapabilities config) {
-            boolean isVoiceCapable =
+            mCurrentState.voiceCapable =
                     config.isCapable(MmTelFeature.MmTelCapabilities.CAPABILITY_TYPE_VOICE);
-            boolean isVideoCapable =
+            mCurrentState.videoCapable =
                     config.isCapable(MmTelFeature.MmTelCapabilities.CAPABILITY_TYPE_VIDEO);
-            boolean isImsRegistered = mPhone.isImsRegistered(mSubscriptionInfo.getSubscriptionId());
-            mCurrentState.isVolteRegistered = isImsRegistered&&(isVoiceCapable||isVideoCapable);
-            Log.d(mTag, "onCapabilitiesStatusChanged isVoiceCapable=" + isVoiceCapable
-                    + " isVideoCapable=" + isVideoCapable
-                    + " isImsRegistered=" + isImsRegistered);
+            Log.d(mTag, "onCapabilitiesStatusChanged isVoiceCapable=" + mCurrentState.voiceCapable
+                    + " isVideoCapable=" + mCurrentState.videoCapable);
             notifyListenersIfNecessary();
         }
     };
 
+    private final ImsMmTelManager.RegistrationCallback mImsRegistrationCallback =
+            new ImsMmTelManager.RegistrationCallback() {
+                @Override
+                public void onRegistered(int imsTransportType) {
+                    Log.d(mTag, "onRegistered imsTransportType=" + imsTransportType);
+                    mCurrentState.imsRegistered = true;
+                    notifyListenersIfNecessary();
+                }
+
+                @Override
+                public void onRegistering(int imsTransportType) {
+                    Log.d(mTag, "onRegistering imsTransportType=" + imsTransportType);
+                    mCurrentState.imsRegistered = false;
+                    notifyListenersIfNecessary();
+                }
+
+                @Override
+                public void onUnregistered(ImsReasonInfo info) {
+                    Log.d(mTag, "onDeregistered imsReasonInfo=" + info);
+                    mCurrentState.imsRegistered = false;
+                    notifyListenersIfNecessary();
+                }
+    };
+
     private final BroadcastReceiver mVolteSwitchObserver = new BroadcastReceiver() {
         public void onReceive(Context context, Intent intent) {
             Log.d(mTag, "action=" + intent.getAction());
@@ -840,7 +880,9 @@ public class MobileSignalController extends SignalController<
         boolean userSetup;
         boolean roaming;
         boolean defaultDataOff;  // Tracks the on/off state of the defaultDataSubscription
-        boolean isVolteRegistered;
+        boolean imsRegistered;
+        boolean voiceCapable;
+        boolean videoCapable;
 
         @Override
         public void copyFrom(State s) {
@@ -857,7 +899,9 @@ public class MobileSignalController extends SignalController<
             userSetup = state.userSetup;
             roaming = state.roaming;
             defaultDataOff = state.defaultDataOff;
-            isVolteRegistered = state.isVolteRegistered;
+            imsRegistered = state.imsRegistered;
+            voiceCapable = state.voiceCapable;
+            videoCapable = state.videoCapable;
         }
 
         @Override
@@ -876,7 +920,9 @@ public class MobileSignalController extends SignalController<
                     .append(',');
             builder.append("userSetup=").append(userSetup).append(',');
             builder.append("defaultDataOff=").append(defaultDataOff);
-            builder.append("isVolteRegistered=").append(isVolteRegistered);
+            builder.append("imsRegistered=").append(imsRegistered).append(',');
+            builder.append("voiceCapable=").append(voiceCapable).append(',');
+            builder.append("videoCapable=").append(videoCapable);
         }
 
         @Override
@@ -893,7 +939,9 @@ public class MobileSignalController extends SignalController<
                     && ((MobileState) o).isDefault == isDefault
                     && ((MobileState) o).roaming == roaming
                     && ((MobileState) o).defaultDataOff == defaultDataOff
-                    && ((MobileState) o).isVolteRegistered == isVolteRegistered;
+                    && ((MobileState) o).imsRegistered == imsRegistered
+                    && ((MobileState) o).voiceCapable == voiceCapable
+                    && ((MobileState) o).videoCapable == videoCapable;
         }
     }
 }
-- 
2.25.1

