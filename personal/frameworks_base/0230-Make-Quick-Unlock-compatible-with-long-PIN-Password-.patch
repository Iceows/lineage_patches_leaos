From e3485697145769a6db86635c21cae47f7d719510 Mon Sep 17 00:00:00 2001
From: Hikari-no-Tenshi <kyryljan.serhij@gmail.com>
Date: Sat, 24 Oct 2020 22:45:11 +0300
Subject: [PATCH 230/230] Make Quick Unlock compatible with long PIN/Password
 [1/2]

Idea from OnePlus Oxygen OS.

* Use AsyncTask for PIN/Password check.
* Restore call on main thread check.

@neobuddy89: Adapted for Android 11

Signed-off-by: Pranav Vashi <neobuddy89@gmail.com>
---
 .../internal/widget/LockPatternUtils.java     |  9 +++
 .../com/android/keyguard/KeyguardPINView.java | 56 ++++++++++++++-----
 .../keyguard/KeyguardPasswordView.java        | 51 +++++++++++++----
 3 files changed, 91 insertions(+), 25 deletions(-)

diff --git a/core/java/com/android/internal/widget/LockPatternUtils.java b/core/java/com/android/internal/widget/LockPatternUtils.java
index 16dab40cbc2..e0a2803ea60 100644
--- a/core/java/com/android/internal/widget/LockPatternUtils.java
+++ b/core/java/com/android/internal/widget/LockPatternUtils.java
@@ -388,6 +388,7 @@ public class LockPatternUtils {
      */
     public byte[] verifyCredential(@NonNull LockscreenCredential credential, long challenge,
             int userId) throws RequestThrottledException {
+        throwIfCalledOnMainThread();
         try {
             VerifyCredentialResponse response = getLockSettings().verifyCredential(
                     credential, challenge, userId);
@@ -418,6 +419,7 @@ public class LockPatternUtils {
     public boolean checkCredential(@NonNull LockscreenCredential credential, int userId,
             @Nullable CheckCredentialProgressCallback progressCallback)
             throws RequestThrottledException {
+        throwIfCalledOnMainThread();
         try {
             VerifyCredentialResponse response = getLockSettings().checkCredential(
                     credential, userId, wrapCallback(progressCallback));
@@ -451,6 +453,7 @@ public class LockPatternUtils {
      */
     public byte[] verifyTiedProfileChallenge(@NonNull LockscreenCredential credential,
             long challenge, int userId) throws RequestThrottledException {
+        throwIfCalledOnMainThread();
         try {
             VerifyCredentialResponse response =
                     getLockSettings().verifyTiedProfileChallenge(credential, challenge, userId);
@@ -1416,6 +1419,12 @@ public class LockPatternUtils {
         return isCredentialRequiredToDecrypt(defaultValue) && !isDoNotAskCredentialsOnBootSet();
     }
 
+    private void throwIfCalledOnMainThread() {
+        if (Looper.getMainLooper().isCurrentThread()) {
+            throw new IllegalStateException("should not be called from the main thread.");
+        }
+    }
+
     public void registerStrongAuthTracker(final StrongAuthTracker strongAuthTracker) {
         try {
             getLockSettings().registerStrongAuthTracker(strongAuthTracker.getStub());
diff --git a/packages/SystemUI/src/com/android/keyguard/KeyguardPINView.java b/packages/SystemUI/src/com/android/keyguard/KeyguardPINView.java
index 55822eb0af8..d16f14977bb 100644
--- a/packages/SystemUI/src/com/android/keyguard/KeyguardPINView.java
+++ b/packages/SystemUI/src/com/android/keyguard/KeyguardPINView.java
@@ -17,6 +17,7 @@
 package com.android.keyguard;
 
 import android.content.Context;
+import android.os.AsyncTask;
 import android.os.UserHandle;
 import android.provider.Settings;
 import android.util.AttributeSet;
@@ -25,6 +26,7 @@ import android.view.ViewGroup;
 import android.view.animation.AnimationUtils;
 import android.widget.LinearLayout;
 
+import com.android.internal.widget.LockPatternUtils;
 import com.android.internal.widget.LockPatternUtils.RequestThrottledException;
 import com.android.keyguard.PasswordTextView.QuickUnlockListener;
 import com.android.settingslib.animation.AppearAnimationUtils;
@@ -170,7 +172,9 @@ public class KeyguardPINView extends KeyguardPinBasedInputView {
         if (quickUnlock) {
             mPasswordEntry.setQuickUnlockListener(new QuickUnlockListener() {
                 public void onValidateQuickUnlock(String password) {
-                    validateQuickUnlock(password);
+                    if (password != null && password.length() == keyguardPinPasswordLength()) {
+                        validateQuickUnlock(mLockPatternUtils, password, userId);
+                    }
                 }
             });
         } else {
@@ -248,25 +252,47 @@ public class KeyguardPINView extends KeyguardPinBasedInputView {
         return false;
     }
 
-    private void validateQuickUnlock(String password) {
-        if (password != null) {
-            if (password.length() > MINIMUM_PASSWORD_LENGTH_BEFORE_REPORT
-                    && kpvCheckPassword(password)) {
-                mPasswordEntry.setEnabled(false);
-                mCallback.reportUnlockAttempt(userId, true, 0);
-                mCallback.dismiss(true, userId);
-                resetPasswordText(true, true);
+    private AsyncTask<?, ?, ?> validateQuickUnlock(final LockPatternUtils utils,
+            final String password,
+            final int userId) {
+        AsyncTask<Void, Void, Boolean> task = new AsyncTask<Void, Void, Boolean>() {
+
+            @Override
+            protected Boolean doInBackground(Void... args) {
+                try {
+                    return utils.checkCredential(
+                           LockscreenCredential.createPinOrNone(password),
+                                                userId, null);
+                } catch (RequestThrottledException ex) {
+                    return false;
+                }
             }
+
+            @Override
+            protected void onPostExecute(Boolean result) {
+                runQuickUnlock(result);
+            }
+        };
+        task.execute();
+        return task;
+    }
+
+    private void runQuickUnlock(Boolean matched) {
+        if (matched) {
+            mPasswordEntry.setEnabled(false);
+            mCallback.reportUnlockAttempt(userId, true, 0);
+            mCallback.dismiss(true, userId);
+            resetPasswordText(true, true);
         }
     }
 
-    private boolean kpvCheckPassword(String password) {
+    private int keyguardPinPasswordLength() {
+        int pinPasswordLength = -1;
         try {
-            return mLockPatternUtils.checkCredential(
-                   LockscreenCredential.createPinOrNone(password),
-                                                    userId, null);
-        } catch (RequestThrottledException ex) {
-            return false;
+            pinPasswordLength = (int) mLockPatternUtils.getLockSettings().getLong("lockscreen.pin_password_length", -1, userId);
+        } catch (Exception e) {
+            // do nothing
         }
+        return pinPasswordLength >= 4 ? pinPasswordLength : -1;
     }
 }
diff --git a/packages/SystemUI/src/com/android/keyguard/KeyguardPasswordView.java b/packages/SystemUI/src/com/android/keyguard/KeyguardPasswordView.java
index 165810c6bfa..912825f4ba9 100644
--- a/packages/SystemUI/src/com/android/keyguard/KeyguardPasswordView.java
+++ b/packages/SystemUI/src/com/android/keyguard/KeyguardPasswordView.java
@@ -18,6 +18,7 @@ package com.android.keyguard;
 
 import android.content.Context;
 import android.graphics.Rect;
+import android.os.AsyncTask;
 import android.os.UserHandle;
 import android.provider.Settings;
 import android.text.Editable;
@@ -37,6 +38,7 @@ import android.view.inputmethod.InputMethodSubtype;
 import android.widget.TextView;
 import android.widget.TextView.OnEditorActionListener;
 
+import com.android.internal.widget.LockPatternUtils;
 import com.android.internal.widget.LockscreenCredential;
 import com.android.internal.widget.LockPatternUtils.RequestThrottledException;
 import com.android.internal.widget.TextViewInputDisabler;
@@ -370,12 +372,8 @@ public class KeyguardPasswordView extends KeyguardAbsKeyInputView
             onUserInput();
             if (quickUnlock) {
                 LockscreenCredential password = getEnteredCredential();
-
-                if (password.size() > MINIMUM_PASSWORD_LENGTH_BEFORE_REPORT
-                        && kpvCheckPassword(password)) {
-                    mCallback.reportUnlockAttempt(userId, true, 0);
-                    mCallback.dismiss(true, userId);
-                    resetPasswordText(true, true);
+                if (password.size() == keyguardPinPasswordLength()) {
+                    validateQuickUnlock(mLockPatternUtils, password, userId);
                 }
             }
         }
@@ -404,11 +402,44 @@ public class KeyguardPasswordView extends KeyguardAbsKeyInputView
                 com.android.internal.R.string.keyguard_accessibility_password_unlock);
     }
 
-    private boolean kpvCheckPassword(LockscreenCredential password) {
+    private AsyncTask<?, ?, ?> validateQuickUnlock(final LockPatternUtils utils,
+            final LockscreenCredential password,
+            final int userId) {
+        AsyncTask<Void, Void, Boolean> task = new AsyncTask<Void, Void, Boolean>() {
+
+            @Override
+            protected Boolean doInBackground(Void... args) {
+                try {
+                    return utils.checkCredential(password, userId, null);
+                } catch (RequestThrottledException ex) {
+                    return false;
+                }
+            }
+
+            @Override
+            protected void onPostExecute(Boolean result) {
+                runQuickUnlock(result);
+            }
+        };
+        task.execute();
+        return task;
+    }
+
+    private void runQuickUnlock(Boolean matched) {
+        if (matched) {
+            mCallback.reportUnlockAttempt(userId, true, 0);
+            mCallback.dismiss(true, userId);
+            resetPasswordText(true, true);
+        }
+    }
+
+    private int keyguardPinPasswordLength() {
+        int pinPasswordLength = -1;
         try {
-            return mLockPatternUtils.checkCredential(password, userId, null);
-        } catch (RequestThrottledException ex) {
-            return false;
+            pinPasswordLength = (int) mLockPatternUtils.getLockSettings().getLong("lockscreen.pin_password_length", 0, userId);
+        } catch (Exception e) {
+            // do nothing
         }
+        return pinPasswordLength >= 4 ? pinPasswordLength : -1;
     }
 }
-- 
2.25.1

