From 45893cf637c25990cef6374e86de41f48ff3577b Mon Sep 17 00:00:00 2001
From: Danny Lin <danny@kdrag0n.dev>
Date: Mon, 14 Dec 2020 20:25:08 -0800
Subject: [PATCH 201/230] Revert "Only allow system apps to be forceQueryable"

This reverts commit 697c2f94379b304826ced6caefac4597a6c2f5af.

The commit, introduced in rvc-qpr1, breaks user apps that impersonate
Google Play Services (e.g. microG and Gcam Services Provider). GMS
clients depend on the ability to query for the GSF services content
provider in order to check for the existence of GMS.

Reverting this isn't too bad from a security perspective because only
apps that explicitly specify android:forceQueryable="true" in their
manifest will have queryable providers.

Change-Id: I31d0379acfaf790e8077440a9dd529a18f38de44
---
 .../com/android/server/pm/AppsFilter.java     |  4 ++--
 .../com/android/server/pm/AppsFilterTest.java | 20 +------------------
 2 files changed, 3 insertions(+), 21 deletions(-)

diff --git a/services/core/java/com/android/server/pm/AppsFilter.java b/services/core/java/com/android/server/pm/AppsFilter.java
index 10f77144e02..c7187143a39 100644
--- a/services/core/java/com/android/server/pm/AppsFilter.java
+++ b/services/core/java/com/android/server/pm/AppsFilter.java
@@ -567,9 +567,9 @@ public class AppsFilter {
         final boolean newIsForceQueryable =
                 mForceQueryable.contains(newPkgSetting.appId)
                         /* shared user that is already force queryable */
-                        || newPkgSetting.forceQueryableOverride /* adb override */
-                        || (newPkgSetting.isSystem() && (mSystemAppsQueryable
                         || newPkg.isForceQueryable()
+                        || newPkgSetting.forceQueryableOverride
+                        || (newPkgSetting.isSystem() && (mSystemAppsQueryable
                         || ArrayUtils.contains(mForceQueryableByDevicePackageNames,
                         newPkg.getPackageName())));
         if (newIsForceQueryable
diff --git a/services/tests/servicestests/src/com/android/server/pm/AppsFilterTest.java b/services/tests/servicestests/src/com/android/server/pm/AppsFilterTest.java
index af5a539450a..5217e548572 100644
--- a/services/tests/servicestests/src/com/android/server/pm/AppsFilterTest.java
+++ b/services/tests/servicestests/src/com/android/server/pm/AppsFilterTest.java
@@ -382,7 +382,7 @@ public class AppsFilterTest {
     }
 
     @Test
-    public void testForceQueryable_SystemDoesntFilter() throws Exception {
+    public void testForceQueryable_DoesntFilter() throws Exception {
         final AppsFilter appsFilter =
                 new AppsFilter(mStateProvider, mFeatureConfigMock, new String[]{}, false, null,
                         mMockExecutor);
@@ -399,24 +399,6 @@ public class AppsFilterTest {
                 SYSTEM_USER));
     }
 
-
-    @Test
-    public void testForceQueryable_NonSystemFilters() throws Exception {
-        final AppsFilter appsFilter =
-                new AppsFilter(mStateProvider, mFeatureConfigMock, new String[]{}, false, null,
-                        mMockExecutor);
-        simulateAddBasicAndroid(appsFilter);
-        appsFilter.onSystemReady();
-
-        PackageSetting target = simulateAddPackage(appsFilter,
-                pkg("com.some.package").setForceQueryable(true), DUMMY_TARGET_APPID);
-        PackageSetting calling = simulateAddPackage(appsFilter,
-                pkg("com.some.other.package"), DUMMY_CALLING_APPID);
-
-        assertTrue(appsFilter.shouldFilterApplication(DUMMY_CALLING_APPID, calling, target,
-                SYSTEM_USER));
-    }
-
     @Test
     public void testForceQueryableByDevice_SystemCaller_DoesntFilter() throws Exception {
         final AppsFilter appsFilter =
-- 
2.25.1

