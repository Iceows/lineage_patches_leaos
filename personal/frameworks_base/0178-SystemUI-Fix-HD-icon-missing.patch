From 8b48c53475f270644565c03fcad227163441408a Mon Sep 17 00:00:00 2001
From: Weijie Wang <weijiew@codeaurora.org>
Date: Wed, 17 Oct 2018 16:46:28 +0800
Subject: [PATCH 178/230] SystemUI: Fix HD icon missing

When SIM is changed to OOS, IMS Connection is closed and
all the active callbacks are removed, so SystemUI can not
get the IMS registration messages after that.

Replace ImsRegistrationImplBase.Callback with
ImsFeature.CapabilityCallback,
Register the callback when IMS connection is available.

Change-Id: Ic4a8a39659413d40fc280f27fa734984f3fc1499
CRs-Fixed: 2334601
---
 .../policy/MobileSignalController.java        | 107 ++++++++++--------
 1 file changed, 61 insertions(+), 46 deletions(-)

diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/policy/MobileSignalController.java b/packages/SystemUI/src/com/android/systemui/statusbar/policy/MobileSignalController.java
index 2cfc6f82a90..7eb4f732c60 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/policy/MobileSignalController.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/policy/MobileSignalController.java
@@ -29,10 +29,9 @@ import android.telephony.Annotation;
 import android.telephony.CdmaEriInformation;
 import android.telephony.CellSignalStrength;
 import android.telephony.CellSignalStrengthCdma;
-import android.telephony.ims.ImsMmTelManager;
-import android.telephony.ims.ImsReasonInfo;
-import android.telephony.ims.stub.ImsRegistrationImplBase;
 import android.telephony.NetworkRegistrationInfo;
+import android.telephony.ims.ImsMmTelManager;
+import android.telephony.ims.feature.MmTelFeature;
 import android.telephony.PhoneStateListener;
 import android.telephony.ServiceState;
 import android.telephony.SignalStrength;
@@ -95,6 +94,7 @@ public class MobileSignalController extends SignalController<
     boolean mInflateSignalStrengths = false;
 
     private ImsManager mImsManager;
+    private ImsManager.Connector mImsManagerConnector;
     private int mCallState = TelephonyManager.CALL_STATE_IDLE;
 
     // TODO: Reduce number of vars passed in, if we have the NetworkController, probably don't
@@ -128,9 +128,23 @@ public class MobileSignalController extends SignalController<
         // Get initial data sim state.
         updateDataSim();
 
-        int phoneId = SubscriptionManager.getPhoneId(mSubscriptionInfo.getSubscriptionId());
+        int phoneId = mSubscriptionInfo.getSimSlotIndex();
         mImsManager = ImsManager.getInstance(mContext, phoneId);
-        updateImsRegistrationState();
+        mImsManagerConnector = new ImsManager.Connector(mContext, phoneId,
+                new ImsManager.Connector.Listener() {
+                    @Override
+                    public void connectionReady(ImsManager manager) throws ImsException {
+                        Log.d(mTag, "ImsManager: connection ready.");
+                        setListeners();
+                    }
+
+                    @Override
+                    public void connectionUnavailable() {
+                        Log.d(mTag, "ImsManager: connection unavailable.");
+                        removeListeners();
+                    }
+        });
+
 
         mObserver = new ContentObserver(new Handler(receiverLooper)) {
             @Override
@@ -189,13 +203,9 @@ public class MobileSignalController extends SignalController<
         mContext.getContentResolver().registerContentObserver(Global.getUriFor(
                 Global.MOBILE_DATA + mSubscriptionInfo.getSubscriptionId()),
                 true, mObserver);
-        try {
-            mImsManager.addRegistrationCallback(mImsRegistrationCallback);
-        }catch(ImsException e){
-            Log.d(mTag, "exception:" + e);
-        }
         mContext.registerReceiver(mVolteSwitchObserver,
                 new IntentFilter("org.codeaurora.intent.action.ACTION_ENHANCE_4G_SWITCH"));
+        mImsManagerConnector.connect();
     }
 
     /**
@@ -204,8 +214,8 @@ public class MobileSignalController extends SignalController<
     public void unregisterListener() {
         mPhone.listen(mPhoneStateListener, 0);
         mContext.getContentResolver().unregisterContentObserver(mObserver);
-        mImsManager.removeRegistrationListener(mImsRegistrationCallback);
         mContext.unregisterReceiver(mVolteSwitchObserver);
+        mImsManagerConnector.disconnect();
     }
 
     /**
@@ -383,23 +393,36 @@ public class MobileSignalController extends SignalController<
         return getCurrentIconId();
     }
 
-    private boolean isEnhanced4gLteModeSettingEnabled() {
-        return mImsManager.isEnhanced4gLteModeSettingEnabledByUser()
-                && mImsManager.isNonTtyOrTtyOnVolteEnabled();
+    private boolean isVolteSwitchOn() {
+        return mImsManager.isEnhanced4gLteModeSettingEnabledByUser();
     }
 
     private int getVolteResId() {
         int resId = 0;
 
-        if ( mCurrentState.imsResitered ) {
+        if ( mCurrentState.isVolteRegistered ) {
             resId = R.drawable.ic_volte;
         }
         return resId;
     }
 
-    private void updateImsRegistrationState() {
-        mCurrentState.imsResitered = mPhone.isImsRegistered(mSubscriptionInfo.getSubscriptionId());
-        notifyListenersIfNecessary();
+    private void setListeners() {
+        try {
+            mImsManager.addCapabilitiesCallback(mCapabilityCallback);
+            Log.d(mTag, "addCapabilitiesCallback " + mCapabilityCallback + " into " + mImsManager);
+        } catch (ImsException e) {
+            Log.d(mTag, "unable to addCapabilitiesCallback callback.");
+        }
+    }
+
+    private void removeListeners() {
+        try {
+            mImsManager.removeCapabilitiesCallback(mCapabilityCallback);
+            Log.d(mTag, "removeCapabilitiesCallback " + mCapabilityCallback
+                    + " from " + mImsManager);
+        } catch (ImsException e) {
+            Log.d(mTag, "unable to remove callback.");
+        }
     }
 
     @Override
@@ -444,8 +467,7 @@ public class MobileSignalController extends SignalController<
                 && mCurrentState.activityOut;
         showDataIcon &= mCurrentState.isDefault || dataDisabled;
         int typeIcon = (showDataIcon || mConfig.alwaysShowDataRatIcon) ? icons.mDataType : 0;
-        int volteIcon = mConfig.showVolteIcon && isEnhanced4gLteModeSettingEnabled()
-                ? getVolteResId() : 0;
+        int volteIcon = mConfig.showVolteIcon && isVolteSwitchOn() ? getVolteResId() : 0;
         callback.setMobileDataIndicators(statusIcon, qsIcon, typeIcon, qsTypeIcon,
                 activityIn, activityOut, volteIcon, dataContentDescription, dataContentDescriptionHtml,
                 description, icons.mIsWide, mSubscriptionInfo.getSubscriptionId(),
@@ -750,28 +772,21 @@ public class MobileSignalController extends SignalController<
         }
     }
 
-    private final ImsMmTelManager.RegistrationCallback mImsRegistrationCallback =
-            new ImsMmTelManager.RegistrationCallback() {
-                @Override
-                public void onRegistered(
-                        @ImsRegistrationImplBase.ImsRegistrationTech int imsRadioTech) {
-                    Log.d(mTag, "onRegistered imsRadioTech=" + imsRadioTech);
-                    updateImsRegistrationState();
-                }
-
-                @Override
-                public void onRegistering(
-                        @ImsRegistrationImplBase.ImsRegistrationTech int imsRadioTech) {
-                    Log.d(mTag, "onRegistering imsRadioTech=" + imsRadioTech);
-                    updateImsRegistrationState();
-                }
-
-                @Override
-                public void onDeregistered(ImsReasonInfo imsReasonInfo) {
-                    Log.d(mTag, "onDeregistered imsReasonInfo=" + imsReasonInfo);
-                    updateImsRegistrationState();
-                }
-            };
+    private ImsMmTelManager.CapabilityCallback mCapabilityCallback = new ImsMmTelManager.CapabilityCallback() {
+        @Override
+        public void onCapabilitiesStatusChanged(MmTelFeature.MmTelCapabilities config) {
+            boolean isVoiceCapable =
+                    config.isCapable(MmTelFeature.MmTelCapabilities.CAPABILITY_TYPE_VOICE);
+            boolean isVideoCapable =
+                    config.isCapable(MmTelFeature.MmTelCapabilities.CAPABILITY_TYPE_VIDEO);
+            boolean isImsRegistered = mPhone.isImsRegistered(mSubscriptionInfo.getSubscriptionId());
+            mCurrentState.isVolteRegistered = isImsRegistered&&(isVoiceCapable||isVideoCapable);
+            Log.d(mTag, "onCapabilitiesStatusChanged isVoiceCapable=" + isVoiceCapable
+                    + " isVideoCapable=" + isVideoCapable
+                    + " isImsRegistered=" + isImsRegistered);
+            notifyListenersIfNecessary();
+        }
+    };
 
     private final BroadcastReceiver mVolteSwitchObserver = new BroadcastReceiver() {
         public void onReceive(Context context, Intent intent) {
@@ -812,7 +827,7 @@ public class MobileSignalController extends SignalController<
         boolean userSetup;
         boolean roaming;
         boolean defaultDataOff;  // Tracks the on/off state of the defaultDataSubscription
-        boolean imsResitered;
+        boolean isVolteRegistered;
 
         @Override
         public void copyFrom(State s) {
@@ -829,7 +844,7 @@ public class MobileSignalController extends SignalController<
             userSetup = state.userSetup;
             roaming = state.roaming;
             defaultDataOff = state.defaultDataOff;
-            imsResitered = state.imsResitered;
+            isVolteRegistered = state.isVolteRegistered;
         }
 
         @Override
@@ -848,7 +863,7 @@ public class MobileSignalController extends SignalController<
                     .append(',');
             builder.append("userSetup=").append(userSetup).append(',');
             builder.append("defaultDataOff=").append(defaultDataOff);
-            builder.append("imsResitered=").append(imsResitered);
+            builder.append("isVolteRegistered=").append(isVolteRegistered);
         }
 
         @Override
@@ -865,7 +880,7 @@ public class MobileSignalController extends SignalController<
                     && ((MobileState) o).isDefault == isDefault
                     && ((MobileState) o).roaming == roaming
                     && ((MobileState) o).defaultDataOff == defaultDataOff
-                    && ((MobileState) o).imsResitered == imsResitered;
+                    && ((MobileState) o).isVolteRegistered == isVolteRegistered;
         }
     }
 }
-- 
2.25.1

