From e4673061e74902ef9086eaf3ee275f46d17dc96f Mon Sep 17 00:00:00 2001
From: Raphael Mounier <mounierr07@gmail.com>
Date: Sat, 17 Jun 2023 11:24:50 +0200
Subject: [PATCH]  Avoid to hold wakelock for long time

Sometimes wakelock was hold for serveral minutes

Similar to AlarmListener, here timeout mechanism is added.
If more time is needed, the source is better to acquire wakelock by itself.

Change-Id: I77cd1ca34962417373ccf59d6ead166ada268f5b
---
 .../android/server/AlarmManagerService.java   | 42 ++++++++++++++++++-
 1 file changed, 40 insertions(+), 2 deletions(-)

diff --git a/services/core/java/com/android/server/AlarmManagerService.java b/services/core/java/com/android/server/AlarmManagerService.java
index 7cbe0c8ba57e..017acbce876c 100644
--- a/services/core/java/com/android/server/AlarmManagerService.java
+++ b/services/core/java/com/android/server/AlarmManagerService.java
@@ -4188,6 +4188,7 @@ class AlarmManagerService extends SystemService {
         public static final int CHARGING_STATUS_CHANGED = 6;
         public static final int REMOVE_FOR_STOPPED = 7;
         public static final int REMOVE_FOR_CANCELED = 8;
+        public static final int PENDINGINTENT_TIMEOUT = 9;
 
         AlarmHandler() {
             super(Looper.myLooper());
@@ -4241,6 +4242,10 @@ class AlarmManagerService extends SystemService {
                     mDeliveryTracker.alarmTimedOut((IBinder) msg.obj);
                     break;
 
+                case PENDINGINTENT_TIMEOUT:
+                    mDeliveryTracker.pendingIntentTimedOut((PendingIntent) msg.obj);
+                    break;
+
                 case REPORT_ALARMS_ACTIVE:
                     if (mLocalDeviceIdleController != null) {
                         mLocalDeviceIdleController.setAlarmsActive(msg.arg1 != 0);
@@ -4712,8 +4717,12 @@ class AlarmManagerService extends SystemService {
         public void onSendFinished(PendingIntent pi, Intent intent, int resultCode,
                 String resultData, Bundle resultExtras) {
             synchronized (mLock) {
-                mSendFinishCount++;
-                updateTrackingLocked(removeLocked(pi, intent));
+                mHandler.removeMessages(AlarmHandler.PENDINGINTENT_TIMEOUT, pi);
+                InFlight inflight = removeLocked(pi, intent);
+                if (inflight != null) {
+                    mSendFinishCount++;
+                    updateTrackingLocked(inflight);
+                }
             }
         }
 
@@ -4739,6 +4748,31 @@ class AlarmManagerService extends SystemService {
             }
         }
 
+
+        /**
+         * Timeout of a pendingIntent alarm delivery
+         */
+        public void pendingIntentTimedOut(PendingIntent p) {
+            synchronized (mLock) {
+                InFlight inflight = removeLocked(p, null);
+                if (inflight != null) {
+                    // TODO: implement ANR policy for the target
+                    if (DEBUG_LISTENER_CALLBACK) {
+                        Slog.i(TAG, "Alarm pendingIntent " + p + " timed out in delivery");
+                    }
+                    updateTrackingLocked(inflight);
+                    mSendFinishCount++;
+                } else {
+                    if (DEBUG_LISTENER_CALLBACK) {
+                        Slog.i(TAG, "Spurious timeout of pendingIntent " + p);
+                    }
+                    mLog.w("Spurious timeout of pendingIntent " + p);
+                }
+            }
+        }
+
+
+
         /**
          * Deliver an alarm and set up the post-delivery handling appropriately
          */
@@ -4757,6 +4791,10 @@ class AlarmManagerService extends SystemService {
                                         Intent.EXTRA_ALARM_COUNT, alarm.count),
                                 mDeliveryTracker, mHandler, null,
                                 allowWhileIdle ? mIdleOptions : getAlarmOperationBundle(alarm));
+
+                        mHandler.sendMessageDelayed(
+                                mHandler.obtainMessage(AlarmHandler.PENDINGINTENT_TIMEOUT,
+                                         alarm.operation), mConstants.LISTENER_TIMEOUT * 2);
                     } catch (PendingIntent.CanceledException e) {
                         if (alarm.repeatInterval > 0) {
                             // This IntentSender is no longer valid, but this
-- 
2.25.1

