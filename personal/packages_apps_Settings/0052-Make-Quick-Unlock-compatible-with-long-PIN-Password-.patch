From 106f27dfa8809f38e91abb4b2e0606ee1a824ee0 Mon Sep 17 00:00:00 2001
From: Hikari-no-Tenshi <kyryljan.serhij@gmail.com>
Date: Sat, 24 Oct 2020 22:52:31 +0300
Subject: [PATCH 52/53] Make Quick Unlock compatible with long PIN/Password
 [2/2]

Idea from OnePlus Oxygen OS.

@neobuddy89: Adapted for Android 11.

Signed-off-by: Pranav Vashi <neobuddy89@gmail.com>
Change-Id: I68d5d474d36be6b112a5b06c13c21e801cff3bc9
---
 src/com/android/settings/Utils.java           | 23 +++++++++++++++++++
 .../settings/password/ChooseLockGeneric.java  |  1 +
 .../settings/password/ChooseLockPassword.java |  1 +
 .../settings/password/ChooseLockPattern.java  |  3 +++
 .../QuickUnlockPreferenceController.java      |  3 ++-
 5 files changed, 30 insertions(+), 1 deletion(-)

diff --git a/src/com/android/settings/Utils.java b/src/com/android/settings/Utils.java
index ff7e0aab2c..ad566d3de7 100644
--- a/src/com/android/settings/Utils.java
+++ b/src/com/android/settings/Utils.java
@@ -147,6 +147,8 @@ public final class Utils extends com.android.settingslib.Utils {
      */
     public static final String PROPERTY_PERMISSIONS_HUB_ENABLED = "permissions_hub_enabled";
 
+    public static final String PIN_PASSWORD_LENGTH = "lockscreen.pin_password_length";
+
     /**
      * Finds a matching activity for a preference's intent. If a matching
      * activity is not found, it will remove the preference.
@@ -1186,4 +1188,25 @@ public final class Utils extends com.android.settingslib.Utils {
         }
         return input;
     }
+
+    public static int getPINPasswordLength(LockPatternUtils lockPatternUtils, int userId) {
+        int pinLength = 0;
+        try {
+            pinLength = (int) lockPatternUtils.getLockSettings().getLong(PIN_PASSWORD_LENGTH, 0, userId);
+        } catch (Exception e) {
+            Log.d("getPINPasswordLength", "getLong error: " + e.getMessage());
+        }
+        if (pinLength >= 4) {
+            return pinLength;
+        }
+        return 0;
+    }
+
+    public static void savePINPasswordLength(LockPatternUtils lockPatternUtils, int length, int userId) {
+        try {
+            lockPatternUtils.getLockSettings().setLong(PIN_PASSWORD_LENGTH, (long) length, userId);
+        } catch (Exception e) {
+            Log.d("savePINPasswordLength", "saveLong error: " + e.getMessage());
+        }
+    }
 }
diff --git a/src/com/android/settings/password/ChooseLockGeneric.java b/src/com/android/settings/password/ChooseLockGeneric.java
index 04ee1b81ff..74e32df6aa 100644
--- a/src/com/android/settings/password/ChooseLockGeneric.java
+++ b/src/com/android/settings/password/ChooseLockGeneric.java
@@ -918,6 +918,7 @@ public class ChooseLockGeneric extends SettingsActivity {
                                 lock.defaultQuality,
                                 lock == ScreenLockType.NONE,
                                 false /* chooseLockSkipped */);
+                        Utils.savePINPasswordLength(mLockPatternUtils, -1, mUserId);
                         return true;
                     case PATTERN:
                     case PIN:
diff --git a/src/com/android/settings/password/ChooseLockPassword.java b/src/com/android/settings/password/ChooseLockPassword.java
index 19cc9c8018..0374bb0bb3 100644
--- a/src/com/android/settings/password/ChooseLockPassword.java
+++ b/src/com/android/settings/password/ChooseLockPassword.java
@@ -675,6 +675,7 @@ public class ChooseLockPassword extends SettingsActivity {
             } else if (mUiStage == Stage.NeedToConfirm) {
                 if (mChosenPassword.equals(mFirstPassword)) {
                     startSaveAndFinish();
+                    Utils.savePINPasswordLength(mLockPatternUtils, mChosenPassword.size(), mUserId);
                 } else {
                     CharSequence tmp = mPasswordEntry.getText();
                     if (tmp != null) {
diff --git a/src/com/android/settings/password/ChooseLockPattern.java b/src/com/android/settings/password/ChooseLockPattern.java
index 3b60b7532c..23bc470b97 100644
--- a/src/com/android/settings/password/ChooseLockPattern.java
+++ b/src/com/android/settings/password/ChooseLockPattern.java
@@ -212,6 +212,7 @@ public class ChooseLockPattern extends SettingsActivity {
         protected TextView mTitleText;
         protected TextView mHeaderText;
         protected TextView mMessageText;
+        private LockPatternUtils mLockPatternUtils;
         protected LockPatternView mLockPatternView;
         protected TextView mFooterText;
         protected FooterButton mSkipOrClearButton;
@@ -469,6 +470,7 @@ public class ChooseLockPattern extends SettingsActivity {
             Intent intent = getActivity().getIntent();
             // Only take this argument into account if it belongs to the current profile.
             mUserId = Utils.getUserIdFromBundle(getActivity(), intent.getExtras());
+            mLockPatternUtils = new LockPatternUtils(getActivity());
 
             if (intent.getBooleanExtra(
                     ChooseLockSettingsHelper.EXTRA_KEY_FOR_CHANGE_CRED_REQUIRED_FOR_BOOT, false)) {
@@ -674,6 +676,7 @@ public class ChooseLockPattern extends SettingsActivity {
                             + " when button is " + RightButtonMode.Confirm);
                 }
                 startSaveAndFinish();
+                Utils.savePINPasswordLength(mLockPatternUtils, 0, mUserId);
             } else if (mUiStage.rightMode == RightButtonMode.Ok) {
                 if (mUiStage != Stage.HelpScreen) {
                     throw new IllegalStateException("Help screen is only mode with ok button, "
diff --git a/src/com/android/settings/security/screenlock/QuickUnlockPreferenceController.java b/src/com/android/settings/security/screenlock/QuickUnlockPreferenceController.java
index 69935dd0cc..c6722d53f8 100644
--- a/src/com/android/settings/security/screenlock/QuickUnlockPreferenceController.java
+++ b/src/com/android/settings/security/screenlock/QuickUnlockPreferenceController.java
@@ -27,6 +27,7 @@ import androidx.preference.TwoStatePreference;
 
 import com.android.internal.widget.LockPatternUtils;
 import com.android.settings.R;
+import com.android.settings.Utils;
 import com.android.settings.core.PreferenceControllerMixin;
 import com.android.settings.overlay.FeatureFactory;
 import com.android.settings.security.trustagent.TrustAgentManager;
@@ -52,7 +53,7 @@ public class QuickUnlockPreferenceController extends AbstractPreferenceControlle
 
     @Override
     public boolean isAvailable() {
-        if (!mLockPatternUtils.isSecure(mUserId)) {
+        if (!mLockPatternUtils.isSecure(mUserId) || Utils.getPINPasswordLength(mLockPatternUtils, mUserId) <= 0) {
             return false;
         }
         switch (mLockPatternUtils.getKeyguardStoredPasswordQuality(mUserId)) {
-- 
2.25.1

