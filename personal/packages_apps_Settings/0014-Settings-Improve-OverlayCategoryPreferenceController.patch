From 5d176eb01eb412b3d0c2ee5734a83c46730a5524 Mon Sep 17 00:00:00 2001
From: Victor Bo <bvoid@yandex.ru>
Date: Sat, 19 Dec 2020 03:28:37 -0500
Subject: [PATCH 14/53] Settings: Improve OverlayCategoryPreferenceController
 for icon packs

  from
  https://github.com/syberia-project/platform_packages_apps_Settings/commit/ddaec3f2c693a5eec0f62e82121eb1772e4ebd77

Change-Id: I3461145c46341f9a4927190cebe5d36f1b403c8e
---
 .../OverlayCategoryPreferenceController.java  | 88 +++++++++++--------
 1 file changed, 53 insertions(+), 35 deletions(-)

diff --git a/src/com/android/settings/development/OverlayCategoryPreferenceController.java b/src/com/android/settings/development/OverlayCategoryPreferenceController.java
index 807b0c1460..302abc4636 100644
--- a/src/com/android/settings/development/OverlayCategoryPreferenceController.java
+++ b/src/com/android/settings/development/OverlayCategoryPreferenceController.java
@@ -39,6 +39,7 @@ import com.android.settings.core.PreferenceControllerMixin;
 import com.android.settingslib.development.DeveloperOptionsPreferenceController;
 
 import java.util.ArrayList;
+import java.util.Collection;
 import java.util.Comparator;
 import java.util.List;
 
@@ -52,13 +53,13 @@ public class OverlayCategoryPreferenceController extends DeveloperOptionsPrefere
     private static final String TAG = "OverlayCategoryPC";
     @VisibleForTesting
     static final String PACKAGE_DEVICE_DEFAULT = "package_device_default";
-    private static final String OVERLAY_TARGET_PACKAGE = "android";
     private static final Comparator<OverlayInfo> OVERLAY_INFO_COMPARATOR =
             Comparator.comparingInt(a -> a.priority);
     private final IOverlayManager mOverlayManager;
     private final boolean mAvailable;
     private final String mCategory;
     private final PackageManager mPackageManager;
+    private final String mDeviceDefaultLabel;
 
     private ListPreference mPreference;
 
@@ -70,6 +71,7 @@ public class OverlayCategoryPreferenceController extends DeveloperOptionsPrefere
         mPackageManager = packageManager;
         mCategory = category;
         mAvailable = overlayManager != null && !getOverlayInfos().isEmpty();
+        mDeviceDefaultLabel = mContext.getString(R.string.overlay_option_device_default);
     }
 
     public OverlayCategoryPreferenceController(Context context, String category) {
@@ -103,30 +105,38 @@ public class OverlayCategoryPreferenceController extends DeveloperOptionsPrefere
         return setOverlay((String) newValue);
     }
 
-    private boolean setOverlay(String packageName) {
-        final String currentPackageName = getOverlayInfos().stream()
+    private boolean setOverlay(String label) {
+        final String[] currentPackageNames = getOverlayInfos().stream()
                 .filter(info -> info.isEnabled())
                 .map(info -> info.packageName)
-                .findFirst()
-                .orElse(null);
+                .toArray(String[]::new);
 
-        if (PACKAGE_DEVICE_DEFAULT.equals(packageName) && TextUtils.isEmpty(currentPackageName)
-                || TextUtils.equals(packageName, currentPackageName)) {
-            // Already set.
-            return true;
-        }
+        final String[] packageNames = getOverlayInfos().stream()
+                .filter(info -> label.equals(getPackageLabel(info.packageName)))
+                .map(info -> info.packageName)
+                .toArray(String[]::new);
+
+        Log.w(TAG, "setOverlay currentPackageNames=" + currentPackageNames.toString());
+        Log.w(TAG, "setOverlay packageNames=" + packageNames.toString());
+        Log.w(TAG, "setOverlay label=" + label);
 
         new AsyncTask<Void, Void, Boolean>() {
             @Override
             protected Boolean doInBackground(Void... params) {
                 try {
-                    if (PACKAGE_DEVICE_DEFAULT.equals(packageName)) {
-                        return mOverlayManager.setEnabled(currentPackageName, false, USER_SYSTEM);
+                    if (label.equals(mDeviceDefaultLabel)) {
+                        for (String packageName : currentPackageNames) {
+                            Log.w(TAG, "setOverlay Disabing overlay" + packageName);
+                            mOverlayManager.setEnabled(packageName, false, USER_SYSTEM);
+                        }
                     } else {
-                        return mOverlayManager.setEnabledExclusiveInCategory(packageName,
-                                USER_SYSTEM);
+                        for (String packageName : packageNames) {
+                            Log.w(TAG, "setOverlay Enabling overlay" + packageName);
+                            mOverlayManager.setEnabledExclusiveInCategory(packageName, USER_SYSTEM);
+                        }
                     }
-                } catch (SecurityException | IllegalStateException | RemoteException e) {
+                    return true;
+                } catch (Exception e) {
                     Log.w(TAG, "Error enabling overlay.", e);
                     return false;
                 }
@@ -148,51 +158,59 @@ public class OverlayCategoryPreferenceController extends DeveloperOptionsPrefere
 
     @Override
     public void updateState(Preference preference) {
-        final List<String> pkgs = new ArrayList<>();
         final List<String> labels = new ArrayList<>();
 
-        String selectedPkg = PACKAGE_DEVICE_DEFAULT;
-        String selectedLabel = mContext.getString(R.string.overlay_option_device_default);
+        String selectedLabel = mDeviceDefaultLabel;
 
-        // Add the default package / label before all of the overlays
-        pkgs.add(selectedPkg);
+        // Add the default label before all of the overlays
         labels.add(selectedLabel);
 
         for (OverlayInfo overlayInfo : getOverlayInfos()) {
-            pkgs.add(overlayInfo.packageName);
-            try {
-                labels.add(mPackageManager.getApplicationInfo(overlayInfo.packageName, 0)
-                        .loadLabel(mPackageManager).toString());
-            } catch (PackageManager.NameNotFoundException e) {
-                labels.add(overlayInfo.packageName);
+            String label = getPackageLabel(overlayInfo.packageName);
+            if (!labels.contains(label)) {
+                labels.add(label);
             }
             if (overlayInfo.isEnabled()) {
-                selectedPkg = pkgs.get(pkgs.size() - 1);
-                selectedLabel = labels.get(labels.size() - 1);
+                Log.w(TAG, "updateState Selecting label"+label);
+                selectedLabel = label;
             }
         }
 
         mPreference.setEntries(labels.toArray(new String[labels.size()]));
-        mPreference.setEntryValues(pkgs.toArray(new String[pkgs.size()]));
-        mPreference.setValue(selectedPkg);
+        mPreference.setEntryValues(labels.toArray(new String[labels.size()]));
+        mPreference.setValue(selectedLabel);
         mPreference.setSummary(selectedLabel);
     }
 
     private List<OverlayInfo> getOverlayInfos() {
         final List<OverlayInfo> filteredInfos = new ArrayList<>();
         try {
-            List<OverlayInfo> overlayInfos = mOverlayManager
-                    .getOverlayInfosForTarget(OVERLAY_TARGET_PACKAGE, USER_SYSTEM);
-            for (OverlayInfo overlayInfo : overlayInfos) {
-                if (mCategory.equals(overlayInfo.category)) {
-                    filteredInfos.add(overlayInfo);
+            Collection<List<OverlayInfo>> allOverlays = mOverlayManager
+                                              .getAllOverlays(USER_SYSTEM).values();
+            for (List<OverlayInfo> overlayInfos : allOverlays) {
+                for (OverlayInfo overlayInfo : overlayInfos) {
+                    if (overlayInfo.category != null) {
+                        if (overlayInfo.category.contains(mCategory)) {
+                            filteredInfos.add(overlayInfo);
+                        }
+                    }
                 }
             }
         } catch (RemoteException re) {
             throw re.rethrowFromSystemServer();
         }
         filteredInfos.sort(OVERLAY_INFO_COMPARATOR);
+        Log.w(TAG, "getOverlays list=" + filteredInfos.toString());
         return filteredInfos;
     }
 
+    private String getPackageLabel(String packageName) {
+        try {
+            return mPackageManager.getApplicationInfo(packageName, 0)
+                                  .loadLabel(mPackageManager).toString();
+        } catch (PackageManager.NameNotFoundException e) {
+            return mDeviceDefaultLabel;
+        }
+    }
+
 }
-- 
2.25.1

